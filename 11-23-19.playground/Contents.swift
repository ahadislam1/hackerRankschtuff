import Foundation

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

func fibonacciNumbers(num: Int) -> [Int] {
    var fibArray = [1,2]
    while fibArray[fibArray.count - 1] < num {
        fibArray.append(fibArray[(fibArray.count - 1)] + fibArray[(fibArray.count - 2)])
    }
    return fibArray
}

func sumOfFibonacciNumbers(num: Int) -> Int {
    let arr = fibonacciNumbers(num: num)
    return arr.reduce(0, { x, y in
        if y % 2 == 0 {
            return x + y
        } else {
            return x
        }
    })
}

let startTime = Date()
print(sumOfFibonacciNumbers(num: 4_000_000))
print(Date().timeIntervalSince(startTime))

